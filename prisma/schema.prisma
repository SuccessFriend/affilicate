// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model AffiliateMeta {
  meta_id String @id @default(cuid())
  affiliate_id String @id @default(cuid())

  meta_key String
  meta_value String

  @@unique([meta_id])
}

model Affiliate {
  affiliate_id String @id @default(cuid())
  rest_id String @id @default(cuid())
  user_id user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  rate String
  rate_type String
  flat_rate_basis String
  payment_email String
  status String
  earnings Int
  unpaid_earnings Int
  referrals Int
  visits Int
  date_registered DateTime
  @@unique([affiliate_id])
}

model Campaigns {
  campaign_id String @id @default(cuid())
  affiliate_id Affiliate @relation(fields: [affiliate_id], references: [id], onDelete: Cascade)
  campaign String
  visits Int
  unique_visits Int
  referrals Int
  conversion_rate Float
  hash String
  rest_id String
}